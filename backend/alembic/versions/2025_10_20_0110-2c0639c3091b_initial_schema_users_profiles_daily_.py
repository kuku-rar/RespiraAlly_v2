"""Initial schema: users, profiles, daily_logs, surveys, events

Revision ID: 2c0639c3091b
Revises: 
Create Date: 2025-10-20 01:10:33.599346+08:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2c0639c3091b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('event_logs',
    sa.Column('event_id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('event_type', sa.String(length=100), nullable=False, comment='Event type: LOGIN, LOGOUT, DATA_SUBMIT, API_CALL, etc.'),
    sa.Column('entity_id', sa.Uuid(), nullable=True, comment='Related user_id or patient_id'),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False, comment='Event payload: {action, details, metadata, ...}'),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('event_id')
    )
    op.create_index('idx_event_logs_entity_timestamp', 'event_logs', ['entity_id', 'timestamp'], unique=False)
    op.create_index('idx_event_logs_type_timestamp', 'event_logs', ['event_type', 'timestamp'], unique=False)
    op.create_index(op.f('ix_event_logs_entity_id'), 'event_logs', ['entity_id'], unique=False)
    op.create_index(op.f('ix_event_logs_event_type'), 'event_logs', ['event_type'], unique=False)
    op.create_index(op.f('ix_event_logs_timestamp'), 'event_logs', ['timestamp'], unique=False)
    op.create_table('users',
    sa.Column('user_id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('line_user_id', sa.String(length=255), nullable=True, comment='LINE User ID for PATIENT login'),
    sa.Column('email', sa.String(length=255), nullable=True, comment='Email for THERAPIST login'),
    sa.Column('hashed_password', sa.String(length=255), nullable=True, comment='Bcrypt hashed password (null for LINE OAuth)'),
    sa.Column('role', sa.Enum('PATIENT', 'THERAPIST', name='user_role_enum'), nullable=False, comment='User role'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp'),
    sa.CheckConstraint("role != 'PATIENT' OR line_user_id IS NOT NULL", name='users_patient_line_check'),
    sa.CheckConstraint("role != 'THERAPIST' OR email IS NOT NULL", name='users_therapist_email_check'),
    sa.CheckConstraint('line_user_id IS NOT NULL OR email IS NOT NULL', name='users_login_method_check'),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('line_user_id')
    )
    op.create_table('therapist_profiles',
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('institution', sa.String(length=200), nullable=False),
    sa.Column('license_number', sa.String(length=50), nullable=False, comment='Professional license number'),
    sa.Column('specialties', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=False, comment='List of specialties: ["Respiratory", "ICU", ...]'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('license_number')
    )
    op.create_table('patient_profiles',
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('therapist_id', sa.Uuid(), nullable=True, comment='Assigned therapist for this patient'),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('birth_date', sa.Date(), nullable=False),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', 'OTHER', name='gender_enum'), nullable=True),
    sa.Column('hospital_medical_record_number', sa.String(length=50), nullable=True, comment='Hospital medical record number (for integration)'),
    sa.Column('height_cm', sa.Integer(), nullable=True, comment='Height in centimeters'),
    sa.Column('weight_kg', sa.Numeric(precision=5, scale=1), nullable=True, comment='Weight in kilograms'),
    sa.Column('smoking_status', sa.Enum('NEVER', 'FORMER', 'CURRENT', name='smoking_status_enum'), nullable=True, comment='Smoking status'),
    sa.Column('smoking_years', sa.Integer(), nullable=True, comment='Years of smoking'),
    sa.Column('medical_history', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False, comment='Medical history: {copd_stage, comorbidities, medications, ...}'),
    sa.Column('contact_info', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False, comment='Contact info: {phone, address, emergency_contact, ...}'),
    sa.CheckConstraint("(smoking_status = 'NEVER' AND (smoking_years IS NULL OR smoking_years = 0)) OR (smoking_status IN ('FORMER', 'CURRENT') AND smoking_years > 0) OR (smoking_status IS NULL)", name='patient_smoking_consistency_check'),
    sa.CheckConstraint("birth_date <= CURRENT_DATE - INTERVAL '18 years' AND birth_date >= CURRENT_DATE - INTERVAL '120 years'", name='patient_age_check'),
    sa.CheckConstraint('height_cm IS NULL OR (height_cm >= 50 AND height_cm <= 250)', name='patient_height_check'),
    sa.CheckConstraint('smoking_years IS NULL OR (smoking_years >= 0 AND smoking_years <= 100)', name='patient_smoking_years_range_check'),
    sa.CheckConstraint('smoking_years IS NULL OR smoking_years <= EXTRACT(YEAR FROM AGE(CURRENT_DATE, birth_date))', name='patient_smoking_years_check'),
    sa.CheckConstraint('weight_kg IS NULL OR (weight_kg >= 20 AND weight_kg <= 300)', name='patient_weight_check'),
    sa.ForeignKeyConstraint(['therapist_id'], ['therapist_profiles.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('daily_logs',
    sa.Column('log_id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('patient_id', sa.Uuid(), nullable=False),
    sa.Column('log_date', sa.Date(), nullable=False),
    sa.Column('medication_taken', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('water_intake_ml', sa.Integer(), nullable=False, comment='Daily water intake in milliliters'),
    sa.Column('steps_count', sa.Integer(), nullable=True, comment='Daily step count'),
    sa.Column('symptoms', sa.Text(), nullable=True, comment='Reported symptoms'),
    sa.Column('mood', sa.Enum('GOOD', 'NEUTRAL', 'BAD', name='mood_enum'), nullable=True, comment='Patient mood'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.CheckConstraint('steps_count IS NULL OR (steps_count >= 0 AND steps_count <= 100000)', name='daily_logs_steps_count_check'),
    sa.CheckConstraint('water_intake_ml >= 0 AND water_intake_ml <= 10000', name='daily_logs_water_intake_check'),
    sa.ForeignKeyConstraint(['patient_id'], ['patient_profiles.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('log_id'),
    sa.UniqueConstraint('patient_id', 'log_date', name='daily_logs_unique_per_day')
    )
    op.create_table('survey_responses',
    sa.Column('response_id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('survey_type', sa.Enum('CAT', 'mMRC', name='survey_type_enum'), nullable=False, comment='Survey type: CAT (COPD Assessment Test) or mMRC (Modified Medical Research Council)'),
    sa.Column('patient_id', sa.Uuid(), nullable=False),
    sa.Column('answers', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Survey answers: {q1: 2, q2: 3, ...}'),
    sa.Column('total_score', sa.Integer(), nullable=False, comment='Total calculated score'),
    sa.Column('severity_level', sa.Enum('MILD', 'MODERATE', 'SEVERE', 'VERY_SEVERE', name='severity_level_enum'), nullable=True, comment='Calculated severity level'),
    sa.Column('submitted_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.CheckConstraint('total_score >= 0', name='survey_total_score_check'),
    sa.ForeignKeyConstraint(['patient_id'], ['patient_profiles.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('response_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('survey_responses')
    op.drop_table('daily_logs')
    op.drop_table('patient_profiles')
    op.drop_table('therapist_profiles')
    op.drop_table('users')
    op.drop_index(op.f('ix_event_logs_timestamp'), table_name='event_logs')
    op.drop_index(op.f('ix_event_logs_event_type'), table_name='event_logs')
    op.drop_index(op.f('ix_event_logs_entity_id'), table_name='event_logs')
    op.drop_index('idx_event_logs_type_timestamp', table_name='event_logs')
    op.drop_index('idx_event_logs_entity_timestamp', table_name='event_logs')
    op.drop_table('event_logs')
    # ### end Alembic commands ###
